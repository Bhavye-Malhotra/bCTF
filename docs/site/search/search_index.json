{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to bCTF # This will be updated regulary as new features are implemented. Current table of contents bellow. Installation and Deployment # For installation on local host refer here For docker deployment refer here Challenges Manager # For auto challenge importer features refer here For informations about preparing your task for auto importing into bCTF refer here","title":"Welcome to bCTF"},{"location":"#welcome-to-bctf","text":"This will be updated regulary as new features are implemented. Current table of contents bellow.","title":"Welcome to bCTF"},{"location":"#installation-and-deployment","text":"For installation on local host refer here For docker deployment refer here","title":"Installation and Deployment"},{"location":"#challenges-manager","text":"For auto challenge importer features refer here For informations about preparing your task for auto importing into bCTF refer here","title":"Challenges Manager"},{"location":"installation/","text":"Installation and Deployment # bCTF is simple as posible to install. It's also very light on system package dependencies. Host Prerequisites # You will need following available on your host machine: Python 3.4+ Pip (optional) Virtualenv - recommended (optional) Docker - it's optional, but if you have it, you'll be able to controll challenge containers from bCTF administration panel. Host Installation # This is suitable for test/local runs. If you wan't to run bCTF from your virtual machine, make sure you have items described in prerequisites installed. Go to your project root, where you cloned bCTF repository, and run following: [/opt/bctf/]$ virtualenv env [/opt/bctf/]$ source env/bin/activate [/opt/bctf/]$ python manage.py migrate [/opt/bctf/]$ python manage.py runserver 127.0.0.1:8000 Then open your browser and point to http://localhost:8000 and you will see bCTF Installation and Setup page. Production changes # For production, you will only have to export DJANGO_SETTINGS_MODULE environment variable to 'bctf.settings.production', so django can know that you are running in production, and use corresponding settings. [/opt/bctf/]$ export DJANGO_SETTINGS_MODULE=bctf.settings.production [/opt/bctf/]$ python manage.py runserver 127.0.0.1:8000 Docker # If you want to run it inside docker, keep in mind that Dockerfile that comes with repository also includes instances of nginx running insade and serving application and static files. Both nginx and bCTF are running from supervisor inside docker. To get it running: [/opt/bctf/]$ docker build -t bctf . [/opt/bctf/]$ docker run -p 80:80 bctf Then open your browser and point to http://localhost:8000 and you will see bCTF Installation and Setup page.","title":"Installation and Deployment"},{"location":"installation/#installation-and-deployment","text":"bCTF is simple as posible to install. It's also very light on system package dependencies.","title":"Installation and Deployment"},{"location":"installation/#host-prerequisites","text":"You will need following available on your host machine: Python 3.4+ Pip (optional) Virtualenv - recommended (optional) Docker - it's optional, but if you have it, you'll be able to controll challenge containers from bCTF administration panel.","title":"Host Prerequisites"},{"location":"installation/#host-installation","text":"This is suitable for test/local runs. If you wan't to run bCTF from your virtual machine, make sure you have items described in prerequisites installed. Go to your project root, where you cloned bCTF repository, and run following: [/opt/bctf/]$ virtualenv env [/opt/bctf/]$ source env/bin/activate [/opt/bctf/]$ python manage.py migrate [/opt/bctf/]$ python manage.py runserver 127.0.0.1:8000 Then open your browser and point to http://localhost:8000 and you will see bCTF Installation and Setup page.","title":"Host Installation"},{"location":"installation/#production-changes","text":"For production, you will only have to export DJANGO_SETTINGS_MODULE environment variable to 'bctf.settings.production', so django can know that you are running in production, and use corresponding settings. [/opt/bctf/]$ export DJANGO_SETTINGS_MODULE=bctf.settings.production [/opt/bctf/]$ python manage.py runserver 127.0.0.1:8000","title":"Production changes"},{"location":"installation/#docker","text":"If you want to run it inside docker, keep in mind that Dockerfile that comes with repository also includes instances of nginx running insade and serving application and static files. Both nginx and bCTF are running from supervisor inside docker. To get it running: [/opt/bctf/]$ docker build -t bctf . [/opt/bctf/]$ docker run -p 80:80 bctf Then open your browser and point to http://localhost:8000 and you will see bCTF Installation and Setup page.","title":"Docker"},{"location":"taskimporter/","text":"Task importer # Task improter is a feature of bCTF that can be found in Admin panel, and it can be used to automaticly import challenges you prepared for competition from .ZIP file. It will create categories, create challenges, add flags, files and points for you. It's really useful for automation of your competition, and it also helps you to better organise your challenges repository. Challenges .ZIP structure # As mentioned, challenges have to be imported from non-password protected .ZIP file. Folder structure of your challenges repository should be fairly simple in order for Task Importer to recogise and import it. Here's example: | Root | |--------| Challenge 1 | | | |- task.yml | | | |- files/ | | | |--------| Challenge 2 | | | |- task.yml | | | |- files/ | | | - example.c | | |--------| Challenge 3 | | | |- task.yml | | | |- files/ So, your folder with challenges should contain one challenge directory per challenge. TaskImporter will consider every folder as a new challenge. Inside challenge directory, you will need to have task.yml file which holds description and definition of your task. task.yml name: Challenge 2 author: hax0r category: example description: Some misleading description points: 150 flag: bctf{flag_imposible_to_guess} attachments: - example.c As you may guess, in section attachments you have to define which files you want to be uploaded as attachment for that specific task. In example above, there's example.c . That means that Task Importer will try to upload file from challenge2/files/example.c . Note: On error, or improperly configured task, Task Importer will skip that challenge and contrinue to import others.","title":"Task importer"},{"location":"taskimporter/#task-importer","text":"Task improter is a feature of bCTF that can be found in Admin panel, and it can be used to automaticly import challenges you prepared for competition from .ZIP file. It will create categories, create challenges, add flags, files and points for you. It's really useful for automation of your competition, and it also helps you to better organise your challenges repository.","title":"Task importer"},{"location":"taskimporter/#challenges-zip-structure","text":"As mentioned, challenges have to be imported from non-password protected .ZIP file. Folder structure of your challenges repository should be fairly simple in order for Task Importer to recogise and import it. Here's example: | Root | |--------| Challenge 1 | | | |- task.yml | | | |- files/ | | | |--------| Challenge 2 | | | |- task.yml | | | |- files/ | | | - example.c | | |--------| Challenge 3 | | | |- task.yml | | | |- files/ So, your folder with challenges should contain one challenge directory per challenge. TaskImporter will consider every folder as a new challenge. Inside challenge directory, you will need to have task.yml file which holds description and definition of your task. task.yml name: Challenge 2 author: hax0r category: example description: Some misleading description points: 150 flag: bctf{flag_imposible_to_guess} attachments: - example.c As you may guess, in section attachments you have to define which files you want to be uploaded as attachment for that specific task. In example above, there's example.c . That means that Task Importer will try to upload file from challenge2/files/example.c . Note: On error, or improperly configured task, Task Importer will skip that challenge and contrinue to import others.","title":"Challenges .ZIP structure"}]}